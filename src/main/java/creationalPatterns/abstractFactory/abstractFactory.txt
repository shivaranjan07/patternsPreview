The abstract factory pattern solves the problem of creating families of related products.
the abstract factory pattern is defined as defining an interface to create families of related or dependent objects
without specifying their concrete classes.

An abstract factory can be thought of as a super factor or a factory of factories.
The pattern achieves the creation of a family of products without revealing concrete classes to the client

it is used whenever we have two or more classes that work together forming a set and can be multiple set created by
client code

consists of the following entities
Abstract Factory - The Abstract Factory interface declares a set of methods for creating each of the abstract products.
Concrete Factory - implement creation methods of the abstract factory. Each concrete factory corresponds to
                   a specific variant of products and creates only those product variants.
Abstract Product - declare interfaces for a set of distinct but related products which make up a product family.
Concrete Product - Concrete Products are various implementations of abstract products, grouped by variants.
                  Each abstract product (ex. chair/sofa) must be implemented in all given variants (ex. Victorian/Modern).
Client - psvm uses concrete factory to create object



The first thing the Abstract Factory pattern suggests is to explicitly declare interfaces
for each distinct product of the product family
Then you can make all variants of products follow those interfaces.


steps.
we start by studying the product "sets"
Create an abstract factory(abstract class/interface)
abstract factory defines the methods for creating products
provide concrete implementation of factory for each set of products

Abstract factory makes use of factory method pattern. you can think of abstract factory as an object with
multiple factory methods

example - cloud resources
ResourceFactory +createInstance() +createStorage
GoogleCloudResourceFactory +createInstance() +createStorage
AwsCloudResourceFactory +createInstance() +createStorage

instance <<abstract product>> +start() +stop() +attachStorage()
Ec2Instance
GoogleComputeEngineInstance

storage <<abstract product>> +getId()
S3Storage
GoogleCloudStorage

client

