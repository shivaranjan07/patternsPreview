Prototype pattern involves creating new objects by copying existing objects.
The object whose copies are made is called the prototype. You can think of the prototype object as the seed object from
which other objects get created but you might ask why would we want to create copies of objects, why not just create
them anew? The motivations for prototype objects are as follows:

Sometimes creating new objects is more expensive than copying existing objects.

Imagine a class will only be loaded at runtime and you can't access its constructor statically.
The run-time environment creates an instance of each dynamically loaded class automatically and registers it with
a prototype manager.
The application can request objects from the prototype manager which in turn can return clones of the prototype.

The number of classes in a system can be greatly reduced by varying the values of a cloned object from a prototypical
instance.

Formally, the pattern is defined as specify the kind of objects to create using a prototypical instance as a model
and making copies of the prototype to create new objects.

Prototype involves following entites
Prototype +clone() //declares a method for cloning itself
Client +operation()
ConcretePrototype +clone() return copy of itself

java has clone() method

steps
we start by creating a class which will be prototype
1 The class must implement Cloneable interface
2 class should override clone() method and return copy of itself
3. The method should declare cloneNotSupportedException in throws clause to give subclasses chance to decide on whether
to support cloning

pls read deep vs shallow(just copy the property of the object) copy

example
GameUnit <abstract, prototype> +clone:GameUnit, +initialize():void, +resetUnit():void
General +clone();GameUnit, +resetUnit():void //will not support cloning operation
SwordsMan +clone():SwordsMan, +resetUnit():void //supports cloning operation

immutable fields on clones save the trouble of deep copy
make sure to reset the mutable state of the object before returning the prototype. allow subclasses to do that
clone() method is protected in Object class and must be overridden to be public to be callable from outside of class






